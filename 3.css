/* Блочная модель языка CSS
Все HTML элемента могут быть представлены как блоки. Блочня модель языка CSS представляет собой дизайн и макет сайта.
Она состоит из внешних отступов, рамок, внутренних полей, и актуального контента.
Свойства работают в таком же порядке: верх, право, низ, лево
Термин "Блочная модель" используется при обсуждении дизайна и компоновки.
Каждый элемент веб-страницы является блоком.
CSS использует блочную модель для определения, насколько большой блок и как его разметить.
Блочная модель также используется для того, чтобы посчитать актуальную ширину и высоту HTML элементов.
Общая ширина элемента
При работе с блоками важно понимать, как считается общая ширина элемента.
Например, общая ширина блока с внутренними полями будет равна сумме ширины плюс левое внутреннее поле и правое внутреннее поле
Вот другой блок с внешними отступами, границей и внутренними полями. Общая ширина равна сумме левого и правого
внутреннего отступа, левой и правой границы, левого и правого внутреннего поля, и актуальной ширины контента.
При установке свойств ширины и высоты элементы с помощью CSS, вы устанавливаете ширину и высоту области контента.
При установке фонового цвета в блок, он покрывает область контента, вместе с внутренними полями.
Общая высота Элемента высчитывается таким же образом, как и ширина.
Для обобщения, общая высота элемента = высота + верхнее внутреннее поле + нижнее внутреннее поле + верхняя граница + нижняя граница +
+ верхний внешний отступ + нижний внешний отступ
CSS свойство border позволяет вам изменять вам изменять рамки HTML элементов.
Чтобы добавить рамку к элементу, вам необходимо определить размер, стиль и цвет рамки.
Свойства рамок могут быть установлены отдельно. Свойство border-width устанавливает ширину рамки.
Цвет рамки элементы может быть определен с помощью названия цвета, RGB, или шестнадцатеричного значения
Свойства рамки не будут работать, пока не будет установлено свойство border-style
Значением по умолчанию свойства border-style является none, которое определяется отсутствием рамки.
Существует несколько стилей, поддерживаемым свойством border-style:
dotted(точечный), dashed (пунктирный), double (двойной), и т.д.
В CSS возможно определить различные рамки для разых сторон, используя следующие свойства:
border-top-style (стиль верхней рамки), border-right-style (стиль правой рамки), border-bottom-style (стиль нижней рамки), border-left-style (стиль левой рамки)
Определение ширины и Высоты в CSS
Ширина и высота элемента может быть также присвоена с помощью использования процентов.
Для того чтобы установить минимальную и максимальную высоту и ширину элемента, вы можете использовать следующие свойства:
min-width - минимум ширина
min-height - минимум высота
max-width - макс ширина
max-height - макс высота
Свойство background-color используется для установки фонового цвета элемента
Свойство background-image устанавливает одно или несколько фоновое изображений в элементе.
По умолчанию, фоновое изображение размещается в левом верхнем углу элемента и повторяется вертикально и горизонтально, чтобы покрыть весь элемент.7
Чтобы указать более одного изображения необходимо лишь перечислить их URL через запятые
Свойство background-repeat определяет, как будет повторяться фоновое изображение.
Можно установить повторение рисунка по горизонтали, вертикали, в обе стороны или чтобы он не повторялся вообще.
body {background-image: url("css_logo.png"); background-repeat: repeat-x;}
Значение Repeat-x будет повторять фоновое изображение только горизонтально.
body {background-image: url("css_logo.png"); background-repeat: repeat-y;}
значение repeat-y будет повторять фоновое изображение только вертикально.
Если хочешь, чтобы изображение было показано только один раз, используй значение no-repeat
Установка значения для наследования
При установке свойства background-repeat на inherit, оно будет принимать такое же значение, как и свойство для родителя элемента.
Например:
body {background-image: url("css_logo.png"); background-repeat: repeat-x;}
p {background-image: url("css_logo.png"); background-repeat: inherit; margin-top: 100px; padding: 40px;}
Мы установили фон элемента body чтобы он повторялся только горизонтально. Если мы установим значение свойства background-repeat
какого-нибудь параграфа чтобы оно наследовалось, то оно будет равно значению свойства элемента body
Свойство background-attachment устанавливает, будет ли прокручиваться фоновое изображение вместе с содержимым элемента.
Даже, если элемент имеет прокручиващийся механизм, "фиксированное" фоновое  изображивание не будет двигаться с элементом.
Вы также можете настроить свойство background-attachment для наследования (inherit) или перемещения вместе с содержимым (scroll).
CSS свойства list позволяют нам устанавливать различные списки маркеров.
В HTML существует два типа списков:
unordered lists (неупорядоченные списки) (<ul>) - элементы списка обозначаются маркерами
ordered lists (упорядоченные списки) (<ol>) - элементы списка обозначаются числами или буквами
В CSS, списки могут быть стилизованы дальше, а изображения могут использоваться в качестве элементов списка.
Одним из способов является использование свойства list-style-type, которое может быть установлено на circle, square,decimal, disc, lower-alpha, и т.д.
Некоторые значения служат для неупорядоченных списков, а некоторые для упорядоченных.
Существует также и другие свойства для списков, например:
list-style-image - устанавливает изображение в качестве маркера списка
list-style-position - устанавливает, как будет размещаться маркер относительно текста (внутри, снаружи)
lidt-style-position: outside является значением по умолчанию
Свойство list-style это универсальное свойство для установки list-style-type,
list-style-image и list-style-position. Оно используется для установки всех трех свойств в одном объявлении.
Вид HTML таблиц может быть улучшен с помощью CSS
Свойство border-collapse определяет, будет ли рамка таблицы объдинена в одну линию, или у каждой ячейки будет своя рамка.
Если рамки разделены, то может быть использовано свойство border-spacing для изменения расстояния между границами ячеек в таблице.
Свойство caption-side определяет положение заголовка таблицы. Значениями могут быть установлены top, bottom.
Свойство emty-cells определяет, отображать рамки и фон пустых ячеек в таблице или нет.
Значения:
Show: отображает границу вокруг ячейки и фон в ней
Hide: граница и фон в пустых ячейках не отображаются
Свойство table-layout определяет, каким образом подсчитывается ширина столбцов таблицы. Возможными значениями являются:
auto - в случае, если ширина столбца или ячейки не задана точно, она будет зависеть от количества содержимого ячейки.
fixed - в случае, если ширина столбца или ячейки не задана точно, количество содержимого ячейки не будет влиять на ее ширину.
Ссылки могут быть стилизованы с помощью любых CSS свойств (например color, font-family, background, и т.д.)
Также ссылки могут быть стилизованы по-другому, в зависимости от того, в каком они состоянии. Доступны следющие псевдо-селекторы:
a:link - определяет стиль для нормальных не посещенных ссылок
a:visited - определяет стиль посещенных ссылок
a:active - ссылка становится активной при нажатии на нее
a:hover - активизируется, когда курсор мыши находится в пределах элемента
При утсановке стиля для нескольких состояний ссылки, существуют некоторые правила:
a:hover ДОЛЖНО следовать после a:link,a:visited
a:active Должно следовать после a:hover
 */
p {padding: 10px; border: 5px solid darkred;}
p.first {padding: 10px; border-style: solid; border-width: 2px; border-color: firebrick;}
p.second {padding: 10px; border-style: solid; border-width: 5px; border-color: darkred;}
p.third {padding: 10px; border-style: solid; border-width: 2px; border-color: RGB(0,153,0);}
p.none {border-style: none;}
p.dotted {border-style: dotted;}
p.dashed {border-style: dashed;}
p.double {border-style: double;}
p.groove {border-style: groove;}
p.ridge {border-style: ridge;}
p.inset {border-style: inset;}
p.outset {border-style: outset;}
p.hidden {border-style: hidden;}
div.out {border: 5px solid darkred; width: 100%; height: 25px;}
p.first {border: 5px solid darkred; min-height: 100px;}
p.second {border: 5px solid darkred; max-width: 100px;}
p {padding: 40px;} /* color: aqua; background-image: url("tree.jpg") */
div {border: 5px solid darkred; width: 200px; height: 200px; background-image: url("tree.jpg")}
ol.lower-alpha {list-style-type: lower-alpha;}
ul.circle {list-style-type: circle;}
ul.square {list-style-type: square;}
body {background-image: url("542976.png"); background-repeat: no-repeat; background-attachment: fixed;}
ul {list-style-image: url("001.jpg"); list-style-position: inside;}
table {border-collapse: separate/*collapse*/; border-spacing: 20px 40px; empty-cells: hide; width: 100%; border: 3px solid darkred;}
caption {caption-side: top;}
td {border: 1px solid darkred;}
table.auto {table-layout: auto;}
table.fixed {table-layout: fixed;}
a.hover {color: darkred;}